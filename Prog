#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *left;
    struct node *right;
};

struct node *root = NULL;
int len;

void append(void);
void addatbegin(void);
void addatafter(void);
void reverse_list(void);
void swap(void);
int length(void);
void del(void);
void display(void);


void append()
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    printf("Enter the node data: ");
    scanf("%d",&temp->data);
    temp->left = NULL;
    temp->right = NULL;
    if (root == NULL)
    {
        root = temp;
    }
    else
    {
        struct node *p;
        p = root;
        while (p->right != NULL)
        {
            p = p->right;
        }
        p->right = temp;
        temp->left = p;
    }
}

void addatbegin()
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    printf("Enter the node data: ");
    scanf("%d",&temp->data);
    temp->left = NULL;
    temp->right = NULL;
    if (root == NULL)
    {
        root = temp;
    }
    else{
        temp->right = root;
        root->left = temp;
        root = temp;
    }
}

void addatafter()
{
    struct node *temp, *p;
    int loc, i=1;
    p = root;
    len = length();
    printf("Enter the location between 1 to %d to insert the node: ", len);
    scanf("%d", &loc);
    temp = (struct node*)malloc(sizeof(struct node));
    printf("Enter the node data: ");
    scanf("%d", &temp->data);
    temp->left = NULL;
    temp->right = NULL;
    if (loc > len || loc == 0)
    {
        printf("Enter the valid location.\n");
        printf("You have only %d nodes\n", len);
    }
    else if (loc == len)
    {
        while (i < loc)
        {
            p = p->right;
            i++;
        }
        temp->left = p;
        p->right = temp;
    }
    else{
        while (i < loc)
        {
            p = p->right;
            i++;
        }
        temp->right = p->right;
        p->right->left = temp;
        temp->left = p;
        p->right = temp;
    }
}

void reverse_list()
{
    int i,j,k;
    struct node *p,*q;
    int temp;
    len = length();
    i = 0;
    j = len - 1;
    p = q = root;
    while(i<j)
    {
        k=0;
        while(k<j)
        {
            q = q->right;
            k++;
        }
        temp = p->data;
        p->data = q->data;
        q->data = temp;
        i++;
        j--;
        p = p->right;
        q = root;
    }
}
void swap()
{
    struct node *p,*q,*r;
    int i = 1,loc;
    len = length();
    p = root;
    printf("Enter the location of node to be swapped: ");
    scanf("%d",&loc);
    if (loc >= len || loc == 0)
    {
        printf("you can swap nodes from location 1 to %d only.\n", len-1);
    }
    else if (loc == len - 1)
    {
        while(i<loc - 1)
    {
        p = p->right;
        i++;
    }
    q = p->right;
    r = q->right;
    r->right = q;
    q->left = r;
    p->right = r;
    r->left = p;
    q->right = NULL;

    }
    else if (loc == 1)
    {
        q = p->right;
        r = q->right;
        p->right = r;
        r->left = p;
        p->left = q;
        q->right = p;
        root = q;
    }
    else
    {
    while(i<loc - 1)
    {
        p = p->right;
        i++;
    }
    q = p->right;
    r = q->right;
    q->right = r->right;
    r->right->left = q;
    r->right = q;
    q->left = r;
    p->right = r;
    r->left =p;
    }
}
int length()
{
    struct node *temp = root;
    int count = 0;
    while (temp != NULL)
    {
        count ++;
        temp = temp->right;
    }
    return count;
}

void del()
{
    int loc;
    struct node *temp;
    len = length();
    printf("Enter the location to be deleted: ");
    scanf("%d", &loc);
    if (loc > len || loc == 0)
    {
        printf("Invalid location. You can give location starting from 1 to %d.\n", len);
    }
    else if (loc == 1)
    {
        temp = root;
        root = temp->right;
        temp->right->left = NULL;
        temp->right = NULL;
        free(temp);
    }
    else if (loc == len)
    {
        struct node *p = root, *q;
        int i = 1;
        while (i<loc - 1)
        {
            p = p->right;
            i++;
        }
        q = p->right;
        p->right = q->right;
        q->left = NULL;
        free(q);
    }
    else
    {
        struct node *p = root, *q;
        int i = 1;
        while (i<loc -1)
        {
            p = p->right;
            i++;
        }
        q = p->right;
        p->right = q->right;
        q->right->left = p;
        q->right = NULL;
        q->left = NULL;
        free(q);
    }
}

void display()
{
    struct node *temp = root;
    if (temp == NULL)
    {
        printf("List is empty\n");
    }
    else{
        while (temp != NULL)
        {
            printf("%d-->",temp->data);
            temp = temp->right;
        }
        printf("\n\n");
    }
}



int main()
{
    int choice;
    while(1)
    {
        printf("Options are: \n");
        printf("1. Append\n");
        printf("2. Add at beginning of node\n");
        printf("3. Add at after particular node\n");
        printf("4. Reverse the list\n");
        printf("5. Swap adjacent nodes\n");
        printf("6. Length of the node\n");
        printf("7. Delete a node\n");
        printf("8. Display the list\n");
        printf("9. Exit the program\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch(choice)
        {
            case 1: append();
                    break;
            case 2: addatbegin();
                    break;
            case 3: addatafter();
                    break;
            case 4: reverse_list();
                    break;
            case 5: swap();
                    break;
            case 6: len = length();
                    printf("Length of the list is %d\n", len);
                    break;
            case 7: del();
                    break;
            case 8: display();
                    break;
            case 9: exit(0);
            default:printf("Enter the valid choice\n");
        }
    }
    return 0;
}
